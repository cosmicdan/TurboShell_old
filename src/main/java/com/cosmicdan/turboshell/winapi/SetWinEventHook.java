package com.cosmicdan.turboshell.winapi;

import com.sun.jna.platform.win32.WinDef;
import com.sun.jna.platform.win32.WinNT;
import lombok.Getter;

public class SetWinEventHook {
	/**	The foreground window has changed */
	public static final int EVENT_SYSTEM_FOREGROUND = 0x0003;
	/** An object has changed location, shape, or size */
	public static final int EVENT_OBJECT_LOCATIONCHANGE = 0x800B;
	/** An object's Name property has changed */
	public static final int EVENT_OBJECT_NAMECHANGE = 0x800C;

	/*
	// debug
	public static final int EVENT_MIN = 0x00000001;
	public static final int EVENT_SYSTEM_END = 0x00FF;
	*/

	/* flags */
	private static final int WINEVENT_OUTOFCONTEXT = 0x0000;

	@Getter
	private final WinNT.HANDLE result;

	/**
	 * @param eventMin
	 *            Type: UINT<br>
	 *            Specifies the event constant for the lowest event value in the
	 *            range of events that are handled by the hook function.<br>
	 *            This parameter can be set to EVENT_MIN to indicate the lowest
	 *            possible event value.
	 * @param eventMax
	 *            Type: UINT<br>
	 *            Specifies the event constant for the highest event value in
	 *            the range of events that are handled by the hook function.<br>
	 *            This parameter can be set to EVENT_MAX to indicate the highest
	 *            possible event value.
	 * @param hmodWinEventProc
	 *            Type: HMODULE<br>
	 *            Handle to the DLL that contains the hook function at
	 *            lpfnWinEventProc, if the WINEVENT_INCONTEXT flag is specified
	 *            in the dwFlags parameter.<br>
	 *            If the hook function is not located in a DLL, or if the
	 *            WINEVENT_OUTOFCONTEXT flag is specified, this parameter is
	 *            NULL.
	 * @param winEventProc
	 *            Type: WINEVENTPROC<br>
	 *            Pointer to the event hook function. For more information about
	 *            this function, see WinEventProc.
	 * @param processID
	 *            Type: DWORD<br>
	 *            Specifies the ID of the process from which the hook function
	 *            receives events.<br>
	 *            Specify zero (0) to receive events from all processes on the
	 *            current desktop.
	 * @param threadID
	 *            Type: DWORD<br>
	 *            Specifies the ID of the thread from which the hook function
	 *            receives events.<br>
	 *            If this parameter is zero, the hook function is associated
	 *            with all existing threads on the current desktop.
	 * @param flags
	 *            Type: UINT<br>
	 *            Flag values that specify the location of the hook function and
	 *            of the events to be skipped.<br>
	 *            The following flags are valid:<br>
	 *            <ul>
	 *            <li><b> WINEVENT_INCONTEXT:</b> The DLL that contains the
	 *            callback function is mapped into the address space of the
	 *            process that generates the event.<br>
	 *            With this flag, the system sends event notifications to the
	 *            callback function as they occur.<br>
	 *            The hook function must be in a DLL when this flag is
	 *            specified. <br>
	 *            This flag has no effect when both the calling process and the
	 *            generating process are not 32-bit or 64-bit processes, or when
	 *            the generating process is a console application.<br>
	 *            For more information, see In-Context Hook Functions.</li>
	 *            <li><b>WINEVENT_OUTOFCONTEXT:</b> The callback function is not
	 *            mapped into the address space of the process that generates
	 *            the event.<br>
	 *            Because the hook function is called across process boundaries,
	 *            the system must queue events.<br>
	 *            Although this method is asynchronous, events are guaranteed to
	 *            be in sequential order. <br>
	 *            For more information, see Out-of-Context Hook Functions.</li>
	 *            <li><b>WINEVENT_SKIPOWNPROCESS:</b><br>
	 *            Prevents this instance of the hook from receiving the events
	 *            that are generated by threads in this process. <br>
	 *            This flag does not prevent threads from generating events.
	 *            </li>
	 *            <li><b>WINEVENT_SKIPOWNTHREAD:</b><br>
	 *            Prevents this instance of the hook from receiving the events
	 *            that are generated by the thread that is registering this
	 *            hook.</li>
	 *            </ul>
	 * @return Type: HWINEVENTHOOK<br>
	 *         If successful, returns an HWINEVENTHOOK value that identifies
	 *         this event hook instance. Applications save this return value to
	 *         use it with the UnhookWinEvent function.<br>
	 *         If unsuccessful, returns zero.<br>
	 */
	public SetWinEventHook(int eventMin, int eventMax, WinDef.HMODULE hmodWinEventProc, WinUser.WinEventProc winEventProc, int processID, int threadID, int flags) {
		result = User32Ex.INSTANCE.SetWinEventHook(eventMin, eventMax, hmodWinEventProc, winEventProc,processID, threadID, flags);
	}

	/** Convenience constructor */
	public SetWinEventHook(int eventMin, int eventMax, WinUser.WinEventProc callback) {
		this(eventMin, eventMax, null, callback, 0, 0, SetWinEventHook.WINEVENT_OUTOFCONTEXT);
	}
}
